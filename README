Once upon a time, based on philosophical observations and developing Markov's ideas, I wrote this very simple program, which takes as input the state of the world before and after some actions. To each value in the "before" space, the program assigns a set of sensors with different thresholds (selectable randomly at program startup) and links them with random values in the "after" space, again giving them random influence, thus making cross-correlation of each bit of information with each other. Seeing the unknown "before" space each such link votes (using its influence), producing the most likely "after" space. In addition, each link has associated statistics, estimating how strongly the associated "before" value affects the "after" value, it is this statistic that determines how link will vote in each particular case.

Thus, such a system can predict rather complex functions, like sorting items in ascending or descending order, while simple logical operations, like XOR, it guesses with 100% accuracy. Moreover, the more connections and the more experience system has, the more accurate the guess. Also, this system can work in a closed loop, trying to predict the state a few steps forward, as if collecting chain links of markov chain. Thus, having a set of actions, the system can choose what brings it closer to the goal. On the other hand, the program can play a role of a simple chat bot, generating a response to examples of chat conversations. Interesting, but the logic underlying this program have little in common with logic behind neural networks or perceptrons, and it is much easier to implement - it actually works directly with raw bits and does not even require floating-point numbers.